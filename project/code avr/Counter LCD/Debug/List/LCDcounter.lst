
AVRASM ver. 2.1.30  D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm Thu May 07 03:46:51 2020

D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1091): warning: Register r5 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1093): warning: Register r7 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1094): warning: Register r8 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1095): warning: Register r3 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1096): warning: Register r10 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1097): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _lup=R4
                 	.DEF _waktu=R5
                 	.DEF _waktu_msb=R6
                 	.DEF _data=R7
                 	.DEF _data_msb=R8
                 	.DEF __lcd_x=R3
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R9
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0079 	JMP  _timer0_int0_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1138): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x0
                 
                 _0x0:
000035 6f43
000036 6e75
000037 6574
000038 0072      	.DB  0x43,0x6F,0x75,0x6E,0x74,0x65,0x72,0x0
                 _0x2000003:
000039 c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1145): warning: .cseg .db misalignment - padding zero byte
00003a 0001      	.DB  0x1
                 _0x2020000:
00003b 4e2d
00003c 4e41
00003d 4900
00003e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Tugas\Embeded System\code avr\Counter LCD\Debug\List\LCDcounter.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000040 0001      	.DW  0x01
000041 0004      	.DW  0x04
000042 0068      	.DW  __REG_VARS*2
                 
000043 0002      	.DW  0x02
000044 0306      	.DW  __base_y_G100
000045 0072      	.DW  _0x2000003*2
                 
000046 0001      	.DW  0x01
000047 030a      	.DW  __seed_G101
000048 0074      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004a 94f8      	CLI
00004b 27ee      	CLR  R30
00004c bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bff5      	OUT  MCUCR,R31
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e0a0      	LDI  R26,LOW(__SRAM_START)
000059 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005a 93ed      	ST   X+,R30
00005b 9701      	SBIW R24,1
00005c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005d e8e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005f 9185      	LPM  R24,Z+
000060 9195      	LPM  R25,Z+
000061 9700      	SBIW R24,0
000062 f061      	BREQ __GLOBAL_INI_END
000063 91a5      	LPM  R26,Z+
000064 91b5      	LPM  R27,Z+
000065 9005      	LPM  R0,Z+
000066 9015      	LPM  R1,Z+
000067 01bf      	MOVW R22,R30
000068 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000069 9005      	LPM  R0,Z+
00006a 920d      	ST   X+,R0
00006b 9701      	SBIW R24,1
00006c f7e1      	BRNE __GLOBAL_INI_LOOP
00006d 01fb      	MOVW R30,R22
00006e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006f e0e0      	LDI  R30,__GPIOR0_INIT
000070 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000071 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000072 bfed      	OUT  SPL,R30
000073 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000074 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000075 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000076 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000077 940c 0088 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*
                 ; * LCDcounter.c
                 ; *
                 ; * Created: 5/7/2020 12:27:13 AM
                 ; * Author: Thoriqul Aziz
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;unsigned char lup=0;
                 ;unsigned char temp[6];
                 ;unsigned char temp1[6];
                 ;int waktu,data;
                 ;//timer_init()
                 ;//{
                 ;//TCCR0A=0X00;
                 ;//TCCR0B=0X05;
                 ;//TCNT0=0X69;
                 ;//OCR0A=0X00;
                 ;//TIMSK0=0X00;
                 ;//lup++;
                 ;//    if (lup==100)
                 ;//    {
                 ;//        waktu++;
                 ;//        lup=0;
                 ;//    }
                 ;//}
                 ;
                 ;interrupt [TIM0_OVF] void timer0_int0_isr(void)
                 ; 0000 0020 {
                 
                 	.CSEG
                 _timer0_int0_isr:
                 ; .FSTART _timer0_int0_isr
000079 93ea      	ST   -Y,R30
00007a 93fa      	ST   -Y,R31
00007b b7ef      	IN   R30,SREG
00007c 93ea      	ST   -Y,R30
                 ; 0000 0021     TCNT0=0xFE;
00007d efee      	LDI  R30,LOW(254)
00007e bde6      	OUT  0x26,R30
                 ; 0000 0022     data++;
00007f e0e1      	LDI  R30,LOW(1)
000080 e0f0      	LDI  R31,HIGH(1)
                +
000081 0e7e     +ADD R7 , R30
000082 1e8f     +ADC R8 , R31
                 	__ADDWRR 7,8,30,31
                 ; 0000 0023 }
000083 91e9      	LD   R30,Y+
000084 bfef      	OUT  SREG,R30
000085 91f9      	LD   R31,Y+
000086 91e9      	LD   R30,Y+
000087 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0026 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0027 DDRB=0xff;
000088 efef      	LDI  R30,LOW(255)
000089 b9e4      	OUT  0x4,R30
                 ; 0000 0028 PORTB=0xff;
00008a b9e5      	OUT  0x5,R30
                 ; 0000 0029 TCCR0A=0x00;
00008b e0e0      	LDI  R30,LOW(0)
00008c bde4      	OUT  0x24,R30
                 ; 0000 002A TCCR0B=0x07;
00008d e0e7      	LDI  R30,LOW(7)
00008e bde5      	OUT  0x25,R30
                 ; 0000 002B TCNT0=0xFE;
00008f efee      	LDI  R30,LOW(254)
000090 bde6      	OUT  0x26,R30
                 ; 0000 002C OCR0A=0x00;
000091 e0e0      	LDI  R30,LOW(0)
000092 bde7      	OUT  0x27,R30
                 ; 0000 002D TIMSK0=0X01;
000093 e0e1      	LDI  R30,LOW(1)
000094 93e0 006e 	STS  110,R30
                 ; 0000 002E #asm("sei")
000096 9478      	sei
                 ; 0000 002F //timer_init();
                 ; 0000 0030 lcd_init(16);
000097 e1a0      	LDI  R26,LOW(16)
000098 d08e      	RCALL _lcd_init
                 ; 0000 0031 while (1)
                 _0x3:
                 ; 0000 0032     {
                 ; 0000 0033     if (data>=100)
000099 e6e4      	LDI  R30,LOW(100)
00009a e0f0      	LDI  R31,HIGH(100)
00009b 167e      	CP   R7,R30
00009c 068f      	CPC  R8,R31
00009d f014      	BRLT _0x6
                 ; 0000 0034     {
                 ; 0000 0035     lcd_clear;
00009e eee4      	LDI  R30,LOW(_lcd_clear)
00009f e0f0      	LDI  R31,HIGH(_lcd_clear)
                 ; 0000 0036     }
                 ; 0000 0037 
                 ; 0000 0038 //
                 ; 0000 0039     lcd_gotoxy(0,0);
                 _0x6:
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 93ea      	ST   -Y,R30
0000a2 e0a0      	LDI  R26,LOW(0)
0000a3 d033      	RCALL _lcd_gotoxy
                 ; 0000 003A     lcd_putsf("Counter");
                +
0000a4 e6aa     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000a5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000a6 d06d      	RCALL _lcd_putsf
                 ; 0000 003B     itoa(data,temp1);
0000a7 928a      	ST   -Y,R8
0000a8 927a      	ST   -Y,R7
0000a9 e0a0      	LDI  R26,LOW(_temp1)
0000aa e0b3      	LDI  R27,HIGH(_temp1)
0000ab 940e 0155 	CALL _itoa
                 ; 0000 003C     lcd_gotoxy(0,1);
0000ad e0e0      	LDI  R30,LOW(0)
0000ae 93ea      	ST   -Y,R30
0000af e0a1      	LDI  R26,LOW(1)
0000b0 d026      	RCALL _lcd_gotoxy
                 ; 0000 003D     lcd_puts(temp1);
0000b1 e0a0      	LDI  R26,LOW(_temp1)
0000b2 e0b3      	LDI  R27,HIGH(_temp1)
0000b3 d051      	RCALL _lcd_puts
                 ; 0000 003E 
                 ; 0000 003F     }
0000b4 cfe4      	RJMP _0x3
                 ; 0000 0040 }
                 _0x7:
0000b5 cfff      	RJMP _0x7
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000b6 93aa      	ST   -Y,R26
0000b7 b1e5      	IN   R30,0x5
0000b8 70ef      	ANDI R30,LOW(0xF)
0000b9 2fae      	MOV  R26,R30
0000ba 81e8      	LD   R30,Y
0000bb 7fe0      	ANDI R30,LOW(0xF0)
0000bc 2bea      	OR   R30,R26
0000bd b9e5      	OUT  0x5,R30
                +
0000be e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000bf 958a     +DEC R24
0000c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000c1 9a2a      	SBI  0x5,2
                +
0000c2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000c3 958a     +DEC R24
0000c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000c5 982a      	CBI  0x5,2
                +
0000c6 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000c7 958a     +DEC R24
0000c8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000c9 c089      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000ca 93aa      	ST   -Y,R26
0000cb 81a8      	LD   R26,Y
0000cc dfe9      	RCALL __lcd_write_nibble_G100
0000cd 81e8          ld    r30,y
0000ce 95e2          swap  r30
0000cf 83e8          st    y,r30
0000d0 81a8      	LD   R26,Y
0000d1 dfe4      	RCALL __lcd_write_nibble_G100
                +
0000d2 ec88     +LDI R24 , LOW ( 200 )
0000d3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0000d4 9701     +SBIW R24 , 1
0000d5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0000d6 c07c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000d7 93aa      	ST   -Y,R26
0000d8 81e8      	LD   R30,Y
0000d9 e0f0      	LDI  R31,0
0000da 5fea      	SUBI R30,LOW(-__base_y_G100)
0000db 4ffc      	SBCI R31,HIGH(-__base_y_G100)
0000dc 81e0      	LD   R30,Z
0000dd 81a9      	LDD  R26,Y+1
0000de 0fae      	ADD  R26,R30
0000df dfea      	RCALL __lcd_write_data
0000e0 8039      	LDD  R3,Y+1
0000e1 80a8      	LDD  R10,Y+0
0000e2 9622      	ADIW R28,2
0000e3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000e4 e0a2      	LDI  R26,LOW(2)
0000e5 940e 0183 	CALL SUBOPT_0x0
0000e7 e0ac      	LDI  R26,LOW(12)
0000e8 dfe1      	RCALL __lcd_write_data
0000e9 e0a1      	LDI  R26,LOW(1)
0000ea 940e 0183 	CALL SUBOPT_0x0
0000ec e0e0      	LDI  R30,LOW(0)
0000ed 2eae      	MOV  R10,R30
0000ee 2e3e      	MOV  R3,R30
0000ef 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0000f0 93aa      	ST   -Y,R26
0000f1 81a8      	LD   R26,Y
0000f2 30aa      	CPI  R26,LOW(0xA)
0000f3 f011      	BREQ _0x2000005
0000f4 1439      	CP   R3,R9
0000f5 f048      	BRLO _0x2000004
                 _0x2000005:
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 93ea      	ST   -Y,R30
0000f8 94a3      	INC  R10
0000f9 2daa      	MOV  R26,R10
0000fa dfdc      	RCALL _lcd_gotoxy
0000fb 81a8      	LD   R26,Y
0000fc 30aa      	CPI  R26,LOW(0xA)
0000fd f409      	BRNE _0x2000007
0000fe c054      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
0000ff 9433      	INC  R3
000100 9a28      	SBI  0x5,0
000101 81a8      	LD   R26,Y
000102 dfc7      	RCALL __lcd_write_data
000103 9828      	CBI  0x5,0
000104 c04e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000105 93ba      	ST   -Y,R27
000106 93aa      	ST   -Y,R26
000107 931a      	ST   -Y,R17
                 _0x2000008:
000108 81a9      	LDD  R26,Y+1
000109 81ba      	LDD  R27,Y+1+1
00010a 91ed      	LD   R30,X+
00010b 83a9      	STD  Y+1,R26
00010c 83ba      	STD  Y+1+1,R27
00010d 2f1e      	MOV  R17,R30
00010e 30e0      	CPI  R30,0
00010f f019      	BREQ _0x200000A
000110 2fa1      	MOV  R26,R17
000111 dfde      	RCALL _lcd_putchar
000112 cff5      	RJMP _0x2000008
                 _0x200000A:
000113 c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000114 93ba      	ST   -Y,R27
000115 93aa      	ST   -Y,R26
000116 931a      	ST   -Y,R17
                 _0x200000B:
000117 81e9      	LDD  R30,Y+1
000118 81fa      	LDD  R31,Y+1+1
000119 9631      	ADIW R30,1
00011a 83e9      	STD  Y+1,R30
00011b 83fa      	STD  Y+1+1,R31
00011c 9731      	SBIW R30,1
00011d 91e4      	LPM  R30,Z
00011e 2f1e      	MOV  R17,R30
00011f 30e0      	CPI  R30,0
000120 f019      	BREQ _0x200000D
000121 2fa1      	MOV  R26,R17
000122 dfcd      	RCALL _lcd_putchar
000123 cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x20A0002:
000124 8118      	LDD  R17,Y+0
000125 9623      	ADIW R28,3
000126 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000127 93aa      	ST   -Y,R26
000128 b1e4      	IN   R30,0x4
000129 6fe0      	ORI  R30,LOW(0xF0)
00012a b9e4      	OUT  0x4,R30
00012b 9a22      	SBI  0x4,2
00012c 9a20      	SBI  0x4,0
00012d 9a21      	SBI  0x4,1
00012e 982a      	CBI  0x5,2
00012f 9828      	CBI  0x5,0
000130 9829      	CBI  0x5,1
000131 8098      	LDD  R9,Y+0
000132 81e8      	LD   R30,Y
000133 58e0      	SUBI R30,-LOW(128)
                +
000134 93e0 0308+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000136 81e8      	LD   R30,Y
000137 54e0      	SUBI R30,-LOW(192)
                +
000138 93e0 0309+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00013a e1a4      	LDI  R26,LOW(20)
00013b e0b0      	LDI  R27,0
00013c 940e 0191 	CALL _delay_ms
00013e 940e 0189 	CALL SUBOPT_0x1
000140 940e 0189 	CALL SUBOPT_0x1
000142 940e 0189 	CALL SUBOPT_0x1
000144 e2a0      	LDI  R26,LOW(32)
000145 df70      	RCALL __lcd_write_nibble_G100
                +
000146 e980     +LDI R24 , LOW ( 400 )
000147 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000148 9701     +SBIW R24 , 1
000149 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00014a e2a8      	LDI  R26,LOW(40)
00014b df7e      	RCALL __lcd_write_data
00014c e0a4      	LDI  R26,LOW(4)
00014d df7c      	RCALL __lcd_write_data
00014e e8a5      	LDI  R26,LOW(133)
00014f df7a      	RCALL __lcd_write_data
000150 e0a6      	LDI  R26,LOW(6)
000151 df78      	RCALL __lcd_write_data
000152 df91      	RCALL _lcd_clear
                 _0x20A0001:
000153 9621      	ADIW R28,1
000154 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000155 93ba      	ST   -Y,R27
000156 93aa      	ST   -Y,R26
000157 91a9          ld   r26,y+
000158 91b9          ld   r27,y+
000159 91e9          ld   r30,y+
00015a 91f9          ld   r31,y+
00015b 9630          adiw r30,0
00015c f42a          brpl __itoa0
00015d 95e0          com  r30
00015e 95f0          com  r31
00015f 9631          adiw r30,1
000160 e26d          ldi  r22,'-'
000161 936d          st   x+,r22
                 __itoa0:
000162 94e8          clt
000163 e180          ldi  r24,low(10000)
000164 e297          ldi  r25,high(10000)
000165 d00d          rcall __itoa1
000166 ee88          ldi  r24,low(1000)
000167 e093          ldi  r25,high(1000)
000168 d00a          rcall __itoa1
000169 e684          ldi  r24,100
00016a 2799          clr  r25
00016b d007          rcall __itoa1
00016c e08a          ldi  r24,10
00016d d005          rcall __itoa1
00016e 2f6e          mov  r22,r30
00016f d010          rcall __itoa5
000170 2766          clr  r22
000171 936c          st   x,r22
000172 9508          ret
                 
                 __itoa1:
000173 2766          clr	 r22
                 __itoa2:
000174 17e8          cp   r30,r24
000175 07f9          cpc  r31,r25
000176 f020          brlo __itoa3
000177 9563          inc  r22
000178 1be8          sub  r30,r24
000179 0bf9          sbc  r31,r25
00017a f7c9          brne __itoa2
                 __itoa3:
00017b 2366          tst  r22
00017c f411          brne __itoa4
00017d f016          brts __itoa5
00017e 9508          ret
                 __itoa4:
00017f 9468          set
                 __itoa5:
000180 5d60          subi r22,-0x30
000181 936d          st   x+,r22
000182 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _temp1:
000300           	.BYTE 0x6
                 __base_y_G100:
000306           	.BYTE 0x4
                 __seed_G101:
00030a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000183 940e 00ca 	CALL __lcd_write_data
000185 e0a3      	LDI  R26,LOW(3)
000186 e0b0      	LDI  R27,0
000187 940c 0191 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000189 e3a0      	LDI  R26,LOW(48)
00018a 940e 00b6 	CALL __lcd_write_nibble_G100
                +
00018c e980     +LDI R24 , LOW ( 400 )
00018d e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00018e 9701     +SBIW R24 , 1
00018f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000190 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000191 9610      	adiw r26,0
000192 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000193 ea80     +LDI R24 , LOW ( 0xFA0 )
000194 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000195 9701     +SBIW R24 , 1
000196 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000197 95a8      	wdr
000198 9711      	sbiw r26,1
000199 f7c9      	brne __delay_ms0
                 __delay_ms1:
00019a 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   4 r4 :   0 r5 :   0 r6 :   0 r7 :   3 
r8 :   3 r9 :   2 r10:   4 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  27 r25:  11 r26:  47 r27:  14 r28:   4 r29:   1 r30:  90 r31:  18 
x  :   7 y  :  52 z  :   9 
Registers used: 20 out of 35 (57.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   0 brne  :  14 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   9 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   2 cpi   :   4 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   3 jmp   :  28 ld    :  19 ldd   :   9 ldi   :  72 
lds   :   0 lpm   :   9 lsl   :   0 lsr   :   0 mov   :   9 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  16 pop   :   0 push  :   0 rcall :  24 ret   :   9 
reti  :   1 rjmp  :  10 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   4 sts   :   3 sub   :   1 subi  :   4 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 50 out of 116 (43.1%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000336    778     44    822   32768   2.5%
[.dseg] 0x000100 0x00030e      0     14     14    2048   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
