;/*
; * UAS.c
; *
; * Created: 6/29/2020 2:11:24 PM
; * Author: Thoriqul Aziz
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <stdint.h>
;#define ADC_VREF_TYPE 0x40 // Voltage Ref: AVCC pin
;
;// Fungsi MAP untuk kesebandingan input output
;long map(long x, long in_min, long in_max, long out_min, long out_max)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
;PCODE: $0000000F VOL: 0
;	x -> Y+16
;	in_min -> Y+12
;	in_max -> Y+8
;	out_min -> Y+4
;	out_max -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0012 }
;PCODE: $00000023 VOL: 0
;
;// Fungsi ADC
;int nilaiADC(uint8_t adctouse)
; 0000 0016 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0017     int ADCval;
; 0000 0018     ADMUX = adctouse;         // use #1 ADC
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	adctouse -> Y+2
;	ADCval -> R16,R17
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0019     ADMUX |= (1 << REFS0);    // use AVcc as the reference
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 001A     ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001B     ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001C     ADCSRA |= (1 << ADEN);    // Enable the ADC
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001D     ADCSRA |= (1 << ADSC);    // Start the ADC conversion
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 001E     while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 001F 
; 0000 0020     ADCval = ADCL;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0021     ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0022     return ADCval;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0023 }
;PCODE: $0000004E VOL: 0
;
;void main(void)
; 0000 0026 {
;PCODE: $0000004F VOL: 0
; 0000 0027 int nilai_adc, on;
; 0000 0028 float off;
; 0000 0029 // Declare Local variabel
; 0000 002A PORTC  = 0xFF;     // Awal Naik pada switch
;PCODE: $00000050 VOL: 0
;	nilai_adc -> R16,R17
;	on -> R18,R19
;	off -> Y+0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002B PINC.2 = 0xff;     // awalan naik pada potensiometri
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002C DDRC   = 0x00;     // DDR 0 -> Input
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 002D PORTB  = 0x00;     // Inisialisasi Port B
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 002E DDRB   = 0XFF;     // DDR 1 -> Output
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 002F 
; 0000 0030 /// ************Inisialisai ADC*******
; 0000 0031 ACSR  = (1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0032 DIDR1 = (0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0033 DIDR0 = (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0034 ADMUX = ADC_VREF_TYPE;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0035 ADCSRA= (1<<ADEN) | (1<<ADPS0);  // enable ADC
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0036 ADCSRB= (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0037 SPCR  = 0x00; // SPI disabled
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0038 TWCR  = 0x00; // TWI disabled
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0039 
; 0000 003A while (1)
;PCODE: $0000006B VOL: 0
; 0000 003B     {
; 0000 003C       while(PINC.0==0 || PINC.1==0)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 003D       {
; 0000 003E             nilai_adc = nilaiADC(2); // Baca Nilai Potensiometer
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 003F             on = map(nilai_adc, 0, 1023, 0, 10); //Mengkonversi Nilai Analog dengan skala 10
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0040             off= map(nilai_adc, 0, 1023, 4, 0); //Mengkonversi Nilai Analog dengan skala 4
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0041 
; 0000 0042             if (PINC.0 == 0)    //aktifkan motor searah jarum jam
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0043             {
; 0000 0044             PORTB=0x01;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0045             delay_ms(on);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0046             PORTB=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0047             delay_ms(off);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0048 
; 0000 0049             }
; 0000 004A             else if (PINC.1 == 0)   //aktifkan motor berlawanan arah jarum jam
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 004B             {
; 0000 004C 
; 0000 004D             PORTB=0x02;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 004E             delay_ms(on);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 004F             PORTB=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0050             delay_ms(off);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0051             }
; 0000 0052       }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0053 
; 0000 0054     }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0055 }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
