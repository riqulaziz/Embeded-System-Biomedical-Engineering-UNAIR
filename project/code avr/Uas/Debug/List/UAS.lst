
AVRASM ver. 2.1.30  D:\Tugas\Embeded System\code avr\Uas\Debug\List\UAS.asm Thu Jul 02 19:57:43 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bff5      	OUT  MCUCR,R31
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e0a0      	LDI  R26,LOW(__SRAM_START)
00004c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
000050 e0e0      	LDI  R30,__GPIOR0_INIT
000051 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000052 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000053 bfed      	OUT  SPL,R30
000054 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000055 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000056 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000057 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000058 940c 00c5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*
                 ; * UAS.c
                 ; *
                 ; * Created: 6/29/2020 2:11:24 PM
                 ; * Author: Thoriqul Aziz
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <stdint.h>
                 ;#define ADC_VREF_TYPE 0x40 // Voltage Ref: AVCC pin
                 ;
                 ;// Fungsi MAP untuk kesebandingan input output
                 ;long map(long x, long in_min, long in_max, long out_min, long out_max)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _map:
                 ; .FSTART _map
                 ; 0000 0011   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
00005a 940e 0244 	CALL __PUTPARD2
                 ;	x -> Y+16
                 ;	in_min -> Y+12
                 ;	in_max -> Y+8
                 ;	out_min -> Y+4
                 ;	out_max -> Y+0
                +
00005c 85ac     +LDD R26 , Y + 12
00005d 85bd     +LDD R27 , Y + 12 + 1
00005e 858e     +LDD R24 , Y + 12 + 2
00005f 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
                +
000060 89e8     +LDD R30 , Y + 16
000061 89f9     +LDD R31 , Y + 16 + 1
000062 896a     +LDD R22 , Y + 16 + 2
000063 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
000064 940e 01c1 	CALL __SUBD12
000066 937f      	PUSH R23
000067 936f      	PUSH R22
000068 93ff      	PUSH R31
000069 93ef      	PUSH R30
                +
00006a 81ac     +LDD R26 , Y + 4
00006b 81bd     +LDD R27 , Y + 4 + 1
00006c 818e     +LDD R24 , Y + 4 + 2
00006d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00006e 940e 0235 	CALL __GETD1S0
000070 940e 01c1 	CALL __SUBD12
000072 91af      	POP  R26
000073 91bf      	POP  R27
000074 918f      	POP  R24
000075 919f      	POP  R25
000076 940e 01f3 	CALL __MULD12
000078 937f      	PUSH R23
000079 936f      	PUSH R22
00007a 93ff      	PUSH R31
00007b 93ef      	PUSH R30
                +
00007c 85ac     +LDD R26 , Y + 12
00007d 85bd     +LDD R27 , Y + 12 + 1
00007e 858e     +LDD R24 , Y + 12 + 2
00007f 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
                +
000080 85e8     +LDD R30 , Y + 8
000081 85f9     +LDD R31 , Y + 8 + 1
000082 856a     +LDD R22 , Y + 8 + 2
000083 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000084 940e 01c1 	CALL __SUBD12
000086 91af      	POP  R26
000087 91bf      	POP  R27
000088 918f      	POP  R24
000089 919f      	POP  R25
00008a 940e 021d 	CALL __DIVD21
                +
00008c 81ac     +LDD R26 , Y + 4
00008d 81bd     +LDD R27 , Y + 4 + 1
00008e 818e     +LDD R24 , Y + 4 + 2
00008f 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000090 940e 01bc 	CALL __ADDD12
000092 9664      	ADIW R28,20
000093 9508      	RET
                 ; 0000 0012 }
                 ; .FEND
                 ;
                 ;// Fungsi ADC
                 ;int nilaiADC(uint8_t adctouse)
                 ; 0000 0016 {
                 _nilaiADC:
                 ; .FSTART _nilaiADC
                 ; 0000 0017     int ADCval;
                 ; 0000 0018     ADMUX = adctouse;         // use #1 ADC
000094 93aa      	ST   -Y,R26
000095 931a      	ST   -Y,R17
000096 930a      	ST   -Y,R16
                 ;	adctouse -> Y+2
                 ;	ADCval -> R16,R17
000097 81ea      	LDD  R30,Y+2
000098 93e0 007c 	STS  124,R30
                 ; 0000 0019     ADMUX |= (1 << REFS0);    // use AVcc as the reference
00009a 91e0 007c 	LDS  R30,124
00009c 64e0      	ORI  R30,0x40
00009d 93e0 007c 	STS  124,R30
                 ; 0000 001A     ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
00009f 91e0 007c 	LDS  R30,124
0000a1 7def      	ANDI R30,0xDF
0000a2 93e0 007c 	STS  124,R30
                 ; 0000 001B     ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
0000a4 91e0 007a 	LDS  R30,122
0000a6 60e7      	ORI  R30,LOW(0x7)
0000a7 93e0 007a 	STS  122,R30
                 ; 0000 001C     ADCSRA |= (1 << ADEN);    // Enable the ADC
0000a9 91e0 007a 	LDS  R30,122
0000ab 68e0      	ORI  R30,0x80
0000ac 93e0 007a 	STS  122,R30
                 ; 0000 001D     ADCSRA |= (1 << ADSC);    // Start the ADC conversion
0000ae 91e0 007a 	LDS  R30,122
0000b0 64e0      	ORI  R30,0x40
0000b1 93e0 007a 	STS  122,R30
                 ; 0000 001E     while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
                 _0x3:
0000b3 91e0 007a 	LDS  R30,122
0000b5 74e0      	ANDI R30,LOW(0x40)
0000b6 f7e1      	BRNE _0x3
                 ; 0000 001F 
                 ; 0000 0020     ADCval = ADCL;
0000b7 9100 0078 	LDS  R16,120
0000b9 2711      	CLR  R17
                 ; 0000 0021     ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
0000ba 91e0 0079 	LDS  R30,121
0000bc 2ffe      	MOV  R31,R30
0000bd e0e0      	LDI  R30,0
                +
0000be 0f0e     +ADD R16 , R30
0000bf 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 ; 0000 0022     return ADCval;
0000c0 01f8      	MOVW R30,R16
0000c1 8119      	LDD  R17,Y+1
0000c2 8108      	LDD  R16,Y+0
0000c3 9623      	ADIW R28,3
0000c4 9508      	RET
                 ; 0000 0023 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0026 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0027 int nilai_adc, on;
                 ; 0000 0028 float off;
                 ; 0000 0029 // Declare Local variabel
                 ; 0000 002A PORTC  = 0xFF;     // Awal Naik pada switch
0000c5 9724      	SBIW R28,4
                 ;	nilai_adc -> R16,R17
                 ;	on -> R18,R19
                 ;	off -> Y+0
0000c6 efef      	LDI  R30,LOW(255)
0000c7 b9e8      	OUT  0x8,R30
                 ; 0000 002B PINC.2 = 0xff;     // awalan naik pada potensiometri
0000c8 9a32      	SBI  0x6,2
                 ; 0000 002C DDRC   = 0x00;     // DDR 0 -> Input
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca b9e7      	OUT  0x7,R30
                 ; 0000 002D PORTB  = 0x00;     // Inisialisasi Port B
0000cb b9e5      	OUT  0x5,R30
                 ; 0000 002E DDRB   = 0XFF;     // DDR 1 -> Output
0000cc efef      	LDI  R30,LOW(255)
0000cd b9e4      	OUT  0x4,R30
                 ; 0000 002F 
                 ; 0000 0030 /// ************Inisialisai ADC*******
                 ; 0000 0031 ACSR  = (1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000ce e8e0      	LDI  R30,LOW(128)
0000cf bfe0      	OUT  0x30,R30
                 ; 0000 0032 DIDR1 = (0<<AIN0D) | (0<<AIN1D);
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93e0 007f 	STS  127,R30
                 ; 0000 0033 DIDR0 = (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0000d3 93e0 007e 	STS  126,R30
                 ; 0000 0034 ADMUX = ADC_VREF_TYPE;
0000d5 e4e0      	LDI  R30,LOW(64)
0000d6 93e0 007c 	STS  124,R30
                 ; 0000 0035 ADCSRA= (1<<ADEN) | (1<<ADPS0);  // enable ADC
0000d8 e8e1      	LDI  R30,LOW(129)
0000d9 93e0 007a 	STS  122,R30
                 ; 0000 0036 ADCSRB= (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000db e0e0      	LDI  R30,LOW(0)
0000dc 93e0 007b 	STS  123,R30
                 ; 0000 0037 SPCR  = 0x00; // SPI disabled
0000de bdec      	OUT  0x2C,R30
                 ; 0000 0038 TWCR  = 0x00; // TWI disabled
0000df 93e0 00bc 	STS  188,R30
                 ; 0000 0039 
                 ; 0000 003A while (1)
                 _0x8:
                 ; 0000 003B     {
                 ; 0000 003C       while(PINC.0==0 || PINC.1==0)
                 _0xB:
0000e1 9b30      	SBIS 0x6,0
0000e2 c002      	RJMP _0xE
0000e3 9931      	SBIC 0x6,1
0000e4 c037      	RJMP _0xD
                 _0xE:
                 ; 0000 003D       {
                 ; 0000 003E             nilai_adc = nilaiADC(2); // Baca Nilai Potensiometer
0000e5 e0a2      	LDI  R26,LOW(2)
0000e6 dfad      	RCALL _nilaiADC
0000e7 018f      	MOVW R16,R30
                 ; 0000 003F             on = map(nilai_adc, 0, 1023, 0, 10); //Mengkonversi Nilai Analog dengan skala 10
0000e8 940e 011e 	CALL SUBOPT_0x0
                +
0000ea e0e0     +LDI R30 , LOW ( 0x0 )
0000eb e0f0     +LDI R31 , HIGH ( 0x0 )
0000ec e060     +LDI R22 , BYTE3 ( 0x0 )
0000ed e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0000ee 940e 023f 	CALL __PUTPARD1
                +
0000f0 e0aa     +LDI R26 , LOW ( 0xA )
0000f1 e0b0     +LDI R27 , HIGH ( 0xA )
0000f2 e080     +LDI R24 , BYTE3 ( 0xA )
0000f3 e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
0000f4 df65      	RCALL _map
0000f5 019f      	MOVW R18,R30
                 ; 0000 0040             off= map(nilai_adc, 0, 1023, 4, 0); //Mengkonversi Nilai Analog dengan skala 4
0000f6 940e 011e 	CALL SUBOPT_0x0
                +
0000f8 e0e4     +LDI R30 , LOW ( 0x4 )
0000f9 e0f0     +LDI R31 , HIGH ( 0x4 )
0000fa e060     +LDI R22 , BYTE3 ( 0x4 )
0000fb e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
0000fc 940e 023f 	CALL __PUTPARD1
                +
0000fe e0a0     +LDI R26 , LOW ( 0x0 )
0000ff e0b0     +LDI R27 , HIGH ( 0x0 )
000100 e080     +LDI R24 , BYTE3 ( 0x0 )
000101 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000102 df57      	RCALL _map
000103 940e 018e 	CALL __CDF1
000105 940e 023a 	CALL __PUTD1S0
                 ; 0000 0041 
                 ; 0000 0042             if (PINC.0 == 0)    //aktifkan motor searah jarum jam
000107 9930      	SBIC 0x6,0
000108 c002      	RJMP _0x10
                 ; 0000 0043             {
                 ; 0000 0044             PORTB=0x01;
000109 e0e1      	LDI  R30,LOW(1)
00010a c003      	RJMP _0x14
                 ; 0000 0045             delay_ms(on);
                 ; 0000 0046             PORTB=0x00;
                 ; 0000 0047             delay_ms(off);
                 ; 0000 0048 
                 ; 0000 0049             }
                 ; 0000 004A             else if (PINC.1 == 0)   //aktifkan motor berlawanan arah jarum jam
                 _0x10:
00010b 9931      	SBIC 0x6,1
00010c c00e      	RJMP _0x12
                 ; 0000 004B             {
                 ; 0000 004C 
                 ; 0000 004D             PORTB=0x02;
00010d e0e2      	LDI  R30,LOW(2)
                 _0x14:
00010e b9e5      	OUT  0x5,R30
                 ; 0000 004E             delay_ms(on);
00010f 01d9      	MOVW R26,R18
000110 940e 0130 	CALL _delay_ms
                 ; 0000 004F             PORTB=0x00;
000112 e0e0      	LDI  R30,LOW(0)
000113 b9e5      	OUT  0x5,R30
                 ; 0000 0050             delay_ms(off);
000114 940e 0235 	CALL __GETD1S0
000116 940e 0155 	CALL __CFD1U
000118 01df      	MOVW R26,R30
000119 940e 0130 	CALL _delay_ms
                 ; 0000 0051             }
                 ; 0000 0052       }
                 _0x12:
00011b cfc5      	RJMP _0xB
                 _0xD:
                 ; 0000 0053 
                 ; 0000 0054     }
00011c cfc4      	RJMP _0x8
                 ; 0000 0055 }
                 _0x13:
00011d cfff      	RJMP _0x13
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
00011e 01f8      	MOVW R30,R16
00011f 940e 01ce 	CALL __CWD1
000121 940e 023f 	CALL __PUTPARD1
                +
000123 e0e0     +LDI R30 , LOW ( 0x0 )
000124 e0f0     +LDI R31 , HIGH ( 0x0 )
000125 e060     +LDI R22 , BYTE3 ( 0x0 )
000126 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000127 940e 023f 	CALL __PUTPARD1
                +
000129 efef     +LDI R30 , LOW ( 0x3FF )
00012a e0f3     +LDI R31 , HIGH ( 0x3FF )
00012b e060     +LDI R22 , BYTE3 ( 0x3FF )
00012c e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
00012d 940e 023f 	CALL __PUTPARD1
00012f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000130 9610      	adiw r26,0
000131 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000132 eb88     +LDI R24 , LOW ( 0xBB8 )
000133 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000134 9701     +SBIW R24 , 1
000135 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
000136 95a8      	wdr
000137 9711      	sbiw r26,1
000138 f7c9      	brne __delay_ms0
                 __delay_ms1:
000139 9508      	ret
                 
                 __REPACK:
00013a e850      	LDI  R21,0x80
00013b 2757      	EOR  R21,R23
00013c f411      	BRNE __REPACK0
00013d 935f      	PUSH R21
00013e c06b      	RJMP __ZERORES
                 __REPACK0:
00013f 3f5f      	CPI  R21,0xFF
000140 f031      	BREQ __REPACK1
000141 0f66      	LSL  R22
000142 0c00      	LSL  R0
000143 9557      	ROR  R21
000144 9567      	ROR  R22
000145 2f75      	MOV  R23,R21
000146 9508      	RET
                 __REPACK1:
000147 935f      	PUSH R21
000148 2000      	TST  R0
000149 f00a      	BRMI __REPACK2
00014a c06b      	RJMP __MAXRES
                 __REPACK2:
00014b c064      	RJMP __MINRES
                 
                 __UNPACK1:
00014c e850      	LDI  R21,0x80
00014d 2e07      	MOV  R0,R23
00014e 2205      	AND  R0,R21
00014f 0f66      	LSL  R22
000150 1f77      	ROL  R23
000151 2775      	EOR  R23,R21
000152 0f55      	LSL  R21
000153 9567      	ROR  R22
000154 9508      	RET
                 
                 __CFD1U:
000155 9468      	SET
000156 c001      	RJMP __CFD1U0
                 __CFD1:
000157 94e8      	CLT
                 __CFD1U0:
000158 935f      	PUSH R21
000159 dff2      	RCALL __UNPACK1
00015a 3870      	CPI  R23,0x80
00015b f018      	BRLO __CFD10
00015c 3f7f      	CPI  R23,0xFF
00015d f408      	BRCC __CFD10
00015e c04b      	RJMP __ZERORES
                 __CFD10:
00015f e156      	LDI  R21,22
000160 1b57      	SUB  R21,R23
000161 f4aa      	BRPL __CFD11
000162 9551      	NEG  R21
000163 3058      	CPI  R21,8
000164 f40e      	BRTC __CFD19
000165 3059      	CPI  R21,9
                 __CFD19:
000166 f030      	BRLO __CFD17
000167 efef      	SER  R30
000168 efff      	SER  R31
000169 ef6f      	SER  R22
00016a e77f      	LDI  R23,0x7F
00016b f977      	BLD  R23,7
00016c c01a      	RJMP __CFD15
                 __CFD17:
00016d 2777      	CLR  R23
00016e 2355      	TST  R21
00016f f0b9      	BREQ __CFD15
                 __CFD18:
000170 0fee      	LSL  R30
000171 1fff      	ROL  R31
000172 1f66      	ROL  R22
000173 1f77      	ROL  R23
000174 955a      	DEC  R21
000175 f7d1      	BRNE __CFD18
000176 c010      	RJMP __CFD15
                 __CFD11:
000177 2777      	CLR  R23
                 __CFD12:
000178 3058      	CPI  R21,8
000179 f028      	BRLO __CFD13
00017a 2fef      	MOV  R30,R31
00017b 2ff6      	MOV  R31,R22
00017c 2f67      	MOV  R22,R23
00017d 5058      	SUBI R21,8
00017e cff9      	RJMP __CFD12
                 __CFD13:
00017f 2355      	TST  R21
000180 f031      	BREQ __CFD15
                 __CFD14:
000181 9576      	LSR  R23
000182 9567      	ROR  R22
000183 95f7      	ROR  R31
000184 95e7      	ROR  R30
000185 955a      	DEC  R21
000186 f7d1      	BRNE __CFD14
                 __CFD15:
000187 2000      	TST  R0
000188 f40a      	BRPL __CFD16
000189 d03c      	RCALL __ANEGD1
                 __CFD16:
00018a 915f      	POP  R21
00018b 9508      	RET
                 
                 __CDF1U:
00018c 9468      	SET
00018d c001      	RJMP __CDF1U0
                 __CDF1:
00018e 94e8      	CLT
                 __CDF1U0:
00018f 9730      	SBIW R30,0
000190 4060      	SBCI R22,0
000191 4070      	SBCI R23,0
000192 f0b1      	BREQ __CDF10
000193 2400      	CLR  R0
000194 f026      	BRTS __CDF11
000195 2377      	TST  R23
000196 f412      	BRPL __CDF11
000197 9400      	COM  R0
000198 d02d      	RCALL __ANEGD1
                 __CDF11:
000199 2e17      	MOV  R1,R23
00019a e17e      	LDI  R23,30
00019b 2011      	TST  R1
                 __CDF12:
00019c f032      	BRMI __CDF13
00019d 957a      	DEC  R23
00019e 0fee      	LSL  R30
00019f 1fff      	ROL  R31
0001a0 1f66      	ROL  R22
0001a1 1c11      	ROL  R1
0001a2 cff9      	RJMP __CDF12
                 __CDF13:
0001a3 2fef      	MOV  R30,R31
0001a4 2ff6      	MOV  R31,R22
0001a5 2d61      	MOV  R22,R1
0001a6 935f      	PUSH R21
0001a7 df92      	RCALL __REPACK
0001a8 915f      	POP  R21
                 __CDF10:
0001a9 9508      	RET
                 
                 __ZERORES:
0001aa 27ee      	CLR  R30
0001ab 27ff      	CLR  R31
0001ac 2766      	CLR  R22
0001ad 2777      	CLR  R23
0001ae 915f      	POP  R21
0001af 9508      	RET
                 
                 __MINRES:
0001b0 efef      	SER  R30
0001b1 efff      	SER  R31
0001b2 e76f      	LDI  R22,0x7F
0001b3 ef7f      	SER  R23
0001b4 915f      	POP  R21
0001b5 9508      	RET
                 
                 __MAXRES:
0001b6 efef      	SER  R30
0001b7 efff      	SER  R31
0001b8 e76f      	LDI  R22,0x7F
0001b9 e77f      	LDI  R23,0x7F
0001ba 915f      	POP  R21
0001bb 9508      	RET
                 
                 __ADDD12:
0001bc 0fea      	ADD  R30,R26
0001bd 1ffb      	ADC  R31,R27
0001be 1f68      	ADC  R22,R24
0001bf 1f79      	ADC  R23,R25
0001c0 9508      	RET
                 
                 __SUBD12:
0001c1 1bea      	SUB  R30,R26
0001c2 0bfb      	SBC  R31,R27
0001c3 0b68      	SBC  R22,R24
0001c4 0b79      	SBC  R23,R25
0001c5 9508      	RET
                 
                 __ANEGD1:
0001c6 95f0      	COM  R31
0001c7 9560      	COM  R22
0001c8 9570      	COM  R23
0001c9 95e1      	NEG  R30
0001ca 4fff      	SBCI R31,-1
0001cb 4f6f      	SBCI R22,-1
0001cc 4f7f      	SBCI R23,-1
0001cd 9508      	RET
                 
                 __CWD1:
0001ce 2f6f      	MOV  R22,R31
0001cf 0f66      	ADD  R22,R22
0001d0 0b66      	SBC  R22,R22
0001d1 2f76      	MOV  R23,R22
0001d2 9508      	RET
                 
                 __MULD12U:
0001d3 9f7a      	MUL  R23,R26
0001d4 2d70      	MOV  R23,R0
0001d5 9f6b      	MUL  R22,R27
0001d6 0d70      	ADD  R23,R0
0001d7 9ff8      	MUL  R31,R24
0001d8 0d70      	ADD  R23,R0
0001d9 9fe9      	MUL  R30,R25
0001da 0d70      	ADD  R23,R0
0001db 9f6a      	MUL  R22,R26
0001dc 2d60      	MOV  R22,R0
0001dd 0d71      	ADD  R23,R1
0001de 9ffb      	MUL  R31,R27
0001df 0d60      	ADD  R22,R0
0001e0 1d71      	ADC  R23,R1
0001e1 9fe8      	MUL  R30,R24
0001e2 0d60      	ADD  R22,R0
0001e3 1d71      	ADC  R23,R1
0001e4 2788      	CLR  R24
0001e5 9ffa      	MUL  R31,R26
0001e6 2df0      	MOV  R31,R0
0001e7 0d61      	ADD  R22,R1
0001e8 1f78      	ADC  R23,R24
0001e9 9feb      	MUL  R30,R27
0001ea 0df0      	ADD  R31,R0
0001eb 1d61      	ADC  R22,R1
0001ec 1f78      	ADC  R23,R24
0001ed 9fea      	MUL  R30,R26
0001ee 2de0      	MOV  R30,R0
0001ef 0df1      	ADD  R31,R1
0001f0 1f68      	ADC  R22,R24
0001f1 1f78      	ADC  R23,R24
0001f2 9508      	RET
                 
                 __MULD12:
0001f3 d02e      	RCALL __CHKSIGND
0001f4 dfde      	RCALL __MULD12U
0001f5 f40e      	BRTC __MULD121
0001f6 dfcf      	RCALL __ANEGD1
                 __MULD121:
0001f7 9508      	RET
                 
                 __DIVD21U:
0001f8 933f      	PUSH R19
0001f9 934f      	PUSH R20
0001fa 935f      	PUSH R21
0001fb 2400      	CLR  R0
0001fc 2411      	CLR  R1
0001fd 2744      	CLR  R20
0001fe 2755      	CLR  R21
0001ff e230      	LDI  R19,32
                 __DIVD21U1:
000200 0faa      	LSL  R26
000201 1fbb      	ROL  R27
000202 1f88      	ROL  R24
000203 1f99      	ROL  R25
000204 1c00      	ROL  R0
000205 1c11      	ROL  R1
000206 1f44      	ROL  R20
000207 1f55      	ROL  R21
000208 1a0e      	SUB  R0,R30
000209 0a1f      	SBC  R1,R31
00020a 0b46      	SBC  R20,R22
00020b 0b57      	SBC  R21,R23
00020c f428      	BRCC __DIVD21U2
00020d 0e0e      	ADD  R0,R30
00020e 1e1f      	ADC  R1,R31
00020f 1f46      	ADC  R20,R22
000210 1f57      	ADC  R21,R23
000211 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000212 60a1      	SBR  R26,1
                 __DIVD21U3:
000213 953a      	DEC  R19
000214 f759      	BRNE __DIVD21U1
000215 01fd      	MOVW R30,R26
000216 01bc      	MOVW R22,R24
000217 01d0      	MOVW R26,R0
000218 01ca      	MOVW R24,R20
000219 915f      	POP  R21
00021a 914f      	POP  R20
00021b 913f      	POP  R19
00021c 9508      	RET
                 
                 __DIVD21:
00021d d004      	RCALL __CHKSIGND
00021e dfd9      	RCALL __DIVD21U
00021f f40e      	BRTC __DIVD211
000220 dfa5      	RCALL __ANEGD1
                 __DIVD211:
000221 9508      	RET
                 
                 __CHKSIGND:
000222 94e8      	CLT
000223 ff77      	SBRS R23,7
000224 c002      	RJMP __CHKSD1
000225 dfa0      	RCALL __ANEGD1
000226 9468      	SET
                 __CHKSD1:
000227 ff97      	SBRS R25,7
000228 c00b      	RJMP __CHKSD2
000229 2400      	CLR  R0
00022a 95a0      	COM  R26
00022b 95b0      	COM  R27
00022c 9580      	COM  R24
00022d 9590      	COM  R25
00022e 9611      	ADIW R26,1
00022f 1d80      	ADC  R24,R0
000230 1d90      	ADC  R25,R0
000231 f800      	BLD  R0,0
000232 9403      	INC  R0
000233 fa00      	BST  R0,0
                 __CHKSD2:
000234 9508      	RET
                 
                 __GETD1S0:
000235 81e8      	LD   R30,Y
000236 81f9      	LDD  R31,Y+1
000237 816a      	LDD  R22,Y+2
000238 817b      	LDD  R23,Y+3
000239 9508      	RET
                 
                 __PUTD1S0:
00023a 83e8      	ST   Y,R30
00023b 83f9      	STD  Y+1,R31
00023c 836a      	STD  Y+2,R22
00023d 837b      	STD  Y+3,R23
00023e 9508      	RET
                 
                 __PUTPARD1:
00023f 937a      	ST   -Y,R23
000240 936a      	ST   -Y,R22
000241 93fa      	ST   -Y,R31
000242 93ea      	ST   -Y,R30
000243 9508      	RET
                 
                 __PUTPARD2:
000244 939a      	ST   -Y,R25
000245 938a      	ST   -Y,R24
000246 93ba      	ST   -Y,R27
000247 93aa      	ST   -Y,R26
000248 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  28 r1 :  14 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   4 r18:   2 r19:   4 r20:   7 r21:  35 r22:  48 r23:  53 
r24:  29 r25:  18 r26:  29 r27:  18 r28:   4 r29:   1 r30:  96 r31:  39 
x  :   2 y  :  46 z  :   0 
Registers used: 20 out of 35 (57.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :  13 
adiw  :   4 and   :   1 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   2 brne  :   9 brpl  :   3 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  22 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   8 
cp    :   0 cpc   :   0 cpi   :   6 cpse  :   0 dec   :   5 des   :   0 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  27 ld    :   1 ldd   :  30 ldi   :  60 
lds   :   8 lpm   :   0 lsl   :   7 lsr   :   1 mov   :  16 movw  :  10 
mul   :  10 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   4 out   :  14 pop   :  16 push  :  15 rcall :  14 ret   :  24 
reti  :   0 rjmp  :  21 rol   :  14 ror   :   6 sbc   :   7 sbci  :   5 
sbi   :   1 sbic  :   3 sbis  :   1 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  14 std   :   3 sts   :  12 sub   :   3 subi  :   1 swap  :   0 
tst   :   6 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000492   1152     18   1170   32768   3.6%
[.dseg] 0x000100 0x000300      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
