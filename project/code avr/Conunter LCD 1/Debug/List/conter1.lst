
AVRASM ver. 2.1.30  D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm Thu May 07 11:27:42 2020

D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm(1090): warning: Register r3 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm(1093): warning: Register r5 already defined by the .DEF directive
D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm(1094): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _data=R3
                 	.DEF _data_msb=R4
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R5
                 	.DEF __lcd_maxx=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0074 	JMP  _timer0_int0_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x0:
000034 6974
000035 656d
000036 0072      	.DB  0x74,0x69,0x6D,0x65,0x72,0x0
                 _0x2000003:
000037 c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm(1138): warning: .cseg .db misalignment - padding zero byte
000038 0001      	.DB  0x1
                 _0x2020000:
000039 4e2d
00003a 4e41
00003b 4900
00003c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Tugas\Embeded System\code avr\Conunter LCD 1\Debug\List\conter1.asm(1141): warning: .cseg .db misalignment - padding zero byte
00003d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003e 0002      	.DW  0x02
00003f 0306      	.DW  __base_y_G100
000040 006e      	.DW  _0x2000003*2
                 
000041 0001      	.DW  0x01
000042 030a      	.DW  __seed_G101
000043 0070      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bff5      	OUT  MCUCR,R31
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004b e08d      	LDI  R24,(14-2)+1
00004c e0a2      	LDI  R26,2
00004d 27bb      	CLR  R27
                 __CLEAR_REG:
00004e 93ed      	ST   X+,R30
00004f 958a      	DEC  R24
000050 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000051 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000052 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000053 e0a0      	LDI  R26,LOW(__SRAM_START)
000054 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006a e0e0      	LDI  R30,__GPIOR0_INIT
00006b bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 0083 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*
                 ; * conter1.c
                 ; *
                 ; * Created: 5/7/2020 10:34:08 AM
                 ; * Author: Thoriqul Aziz
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;int data;
                 ;unsigned char temp[6];
                 ;interrupt [TIM0_OVF] void timer0_int0_isr(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _timer0_int0_isr:
                 ; .FSTART _timer0_int0_isr
000074 93ea      	ST   -Y,R30
000075 93fa      	ST   -Y,R31
000076 b7ef      	IN   R30,SREG
000077 93ea      	ST   -Y,R30
                 ; 0000 0010     TCNT0=0xFD;
000078 efed      	LDI  R30,LOW(253)
000079 bde6      	OUT  0x26,R30
                 ; 0000 0011     data++;
00007a e0e1      	LDI  R30,LOW(1)
00007b e0f0      	LDI  R31,HIGH(1)
                +
00007c 0e3e     +ADD R3 , R30
00007d 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
                 ; 0000 0012 }
00007e 91e9      	LD   R30,Y+
00007f bfef      	OUT  SREG,R30
000080 91f9      	LD   R31,Y+
000081 91e9      	LD   R30,Y+
000082 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0014 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0015 PORTD=0x10;
000083 e1e0      	LDI  R30,LOW(16)
000084 b9eb      	OUT  0xB,R30
                 ; 0000 0016 DDRD=0x10;
000085 b9ea      	OUT  0xA,R30
                 ; 0000 0017 TCCR0A=0x00;
000086 e0e0      	LDI  R30,LOW(0)
000087 bde4      	OUT  0x24,R30
                 ; 0000 0018 TCCR0B=0x07;
000088 e0e7      	LDI  R30,LOW(7)
000089 bde5      	OUT  0x25,R30
                 ; 0000 0019 TCNT0=0xFD;
00008a efed      	LDI  R30,LOW(253)
00008b bde6      	OUT  0x26,R30
                 ; 0000 001A OCR0A=0x00;
00008c e0e0      	LDI  R30,LOW(0)
00008d bde7      	OUT  0x27,R30
                 ; 0000 001B TIMSK0=0X01;
00008e e0e1      	LDI  R30,LOW(1)
00008f 93e0 006e 	STS  110,R30
                 ; 0000 001C #asm("sei")
000091 9478      	sei
                 ; 0000 001D lcd_init(16);
000092 e1a0      	LDI  R26,LOW(16)
000093 d09e      	RCALL _lcd_init
                 ; 0000 001E while (1)
                 _0x3:
                 ; 0000 001F     {
                 ; 0000 0020     if (data>=256) {
000094 e0e0      	LDI  R30,LOW(256)
000095 e0f1      	LDI  R31,HIGH(256)
000096 163e      	CP   R3,R30
000097 064f      	CPC  R4,R31
000098 f00c      	BRLT _0x6
                 ; 0000 0021     lcd_clear();
000099 d055      	RCALL _lcd_clear
                 ; 0000 0022     }
                 ; 0000 0023     lcd_gotoxy(0,0);
                 _0x6:
00009a e0e0      	LDI  R30,LOW(0)
00009b 93ea      	ST   -Y,R30
00009c e0a0      	LDI  R26,LOW(0)
00009d d044      	RCALL _lcd_gotoxy
                 ; 0000 0024     lcd_putsf("timer");
                +
00009e e6a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00009f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000a0 d07e      	RCALL _lcd_putsf
                 ; 0000 0025     itoa(data,temp); //menampilkan di
0000a1 924a      	ST   -Y,R4
0000a2 923a      	ST   -Y,R3
0000a3 e0a0      	LDI  R26,LOW(_temp)
0000a4 e0b3      	LDI  R27,HIGH(_temp)
0000a5 940e 0161 	CALL _itoa
                 ; 0000 0026     lcd_gotoxy(0,1);
0000a7 e0e0      	LDI  R30,LOW(0)
0000a8 93ea      	ST   -Y,R30
0000a9 e0a1      	LDI  R26,LOW(1)
0000aa d037      	RCALL _lcd_gotoxy
                 ; 0000 0027     lcd_puts(temp);
0000ab e0a0      	LDI  R26,LOW(_temp)
0000ac e0b3      	LDI  R27,HIGH(_temp)
0000ad d062      	RCALL _lcd_puts
                 ; 0000 0028     }
0000ae cfe5      	RJMP _0x3
                 ; 0000 0029 }
                 _0x7:
0000af cfff      	RJMP _0x7
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000b0 93aa      	ST   -Y,R26
0000b1 81e8      	LD   R30,Y
0000b2 71e0      	ANDI R30,LOW(0x10)
0000b3 f011      	BREQ _0x2000004
0000b4 9a5d      	SBI  0xB,5
0000b5 c001      	RJMP _0x2000005
                 _0x2000004:
0000b6 985d      	CBI  0xB,5
                 _0x2000005:
0000b7 81e8      	LD   R30,Y
0000b8 72e0      	ANDI R30,LOW(0x20)
0000b9 f011      	BREQ _0x2000006
0000ba 9a5e      	SBI  0xB,6
0000bb c001      	RJMP _0x2000007
                 _0x2000006:
0000bc 985e      	CBI  0xB,6
                 _0x2000007:
0000bd 81e8      	LD   R30,Y
0000be 74e0      	ANDI R30,LOW(0x40)
0000bf f011      	BREQ _0x2000008
0000c0 9a5f      	SBI  0xB,7
0000c1 c001      	RJMP _0x2000009
                 _0x2000008:
0000c2 985f      	CBI  0xB,7
                 _0x2000009:
0000c3 81e8      	LD   R30,Y
0000c4 78e0      	ANDI R30,LOW(0x80)
0000c5 f011      	BREQ _0x200000A
0000c6 9a28      	SBI  0x5,0
0000c7 c001      	RJMP _0x200000B
                 _0x200000A:
0000c8 9828      	CBI  0x5,0
                 _0x200000B:
                +
0000c9 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000ca 958a     +DEC R24
0000cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000cc 9a5a      	SBI  0xB,2
                +
0000cd e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000ce 958a     +DEC R24
0000cf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000d0 985a      	CBI  0xB,2
                +
0000d1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000d2 958a     +DEC R24
0000d3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000d4 c08a      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000d5 93aa      	ST   -Y,R26
0000d6 81a8      	LD   R26,Y
0000d7 dfd8      	RCALL __lcd_write_nibble_G100
0000d8 81e8          ld    r30,y
0000d9 95e2          swap  r30
0000da 83e8          st    y,r30
0000db 81a8      	LD   R26,Y
0000dc dfd3      	RCALL __lcd_write_nibble_G100
                +
0000dd ec88     +LDI R24 , LOW ( 200 )
0000de e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0000df 9701     +SBIW R24 , 1
0000e0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0000e1 c07d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000e2 93aa      	ST   -Y,R26
0000e3 81e8      	LD   R30,Y
0000e4 e0f0      	LDI  R31,0
0000e5 5fea      	SUBI R30,LOW(-__base_y_G100)
0000e6 4ffc      	SBCI R31,HIGH(-__base_y_G100)
0000e7 81e0      	LD   R30,Z
0000e8 81a9      	LDD  R26,Y+1
0000e9 0fae      	ADD  R26,R30
0000ea dfea      	RCALL __lcd_write_data
0000eb 8069      	LDD  R6,Y+1
0000ec 8058      	LDD  R5,Y+0
0000ed 9622      	ADIW R28,2
0000ee 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000ef e0a2      	LDI  R26,LOW(2)
0000f0 940e 018f 	CALL SUBOPT_0x0
0000f2 e0ac      	LDI  R26,LOW(12)
0000f3 dfe1      	RCALL __lcd_write_data
0000f4 e0a1      	LDI  R26,LOW(1)
0000f5 940e 018f 	CALL SUBOPT_0x0
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 2e5e      	MOV  R5,R30
0000f9 2e6e      	MOV  R6,R30
0000fa 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0000fb 93aa      	ST   -Y,R26
0000fc 81a8      	LD   R26,Y
0000fd 30aa      	CPI  R26,LOW(0xA)
0000fe f011      	BREQ _0x2000011
0000ff 1468      	CP   R6,R8
000100 f048      	BRLO _0x2000010
                 _0x2000011:
000101 e0e0      	LDI  R30,LOW(0)
000102 93ea      	ST   -Y,R30
000103 9453      	INC  R5
000104 2da5      	MOV  R26,R5
000105 dfdc      	RCALL _lcd_gotoxy
000106 81a8      	LD   R26,Y
000107 30aa      	CPI  R26,LOW(0xA)
000108 f409      	BRNE _0x2000013
000109 c055      	RJMP _0x20A0001
                 _0x2000013:
                 _0x2000010:
00010a 9463      	INC  R6
00010b 9a58      	SBI  0xB,0
00010c 81a8      	LD   R26,Y
00010d dfc7      	RCALL __lcd_write_data
00010e 9858      	CBI  0xB,0
00010f c04f      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000110 93ba      	ST   -Y,R27
000111 93aa      	ST   -Y,R26
000112 931a      	ST   -Y,R17
                 _0x2000014:
000113 81a9      	LDD  R26,Y+1
000114 81ba      	LDD  R27,Y+1+1
000115 91ed      	LD   R30,X+
000116 83a9      	STD  Y+1,R26
000117 83ba      	STD  Y+1+1,R27
000118 2f1e      	MOV  R17,R30
000119 30e0      	CPI  R30,0
00011a f019      	BREQ _0x2000016
00011b 2fa1      	MOV  R26,R17
00011c dfde      	RCALL _lcd_putchar
00011d cff5      	RJMP _0x2000014
                 _0x2000016:
00011e c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00011f 93ba      	ST   -Y,R27
000120 93aa      	ST   -Y,R26
000121 931a      	ST   -Y,R17
                 _0x2000017:
000122 81e9      	LDD  R30,Y+1
000123 81fa      	LDD  R31,Y+1+1
000124 9631      	ADIW R30,1
000125 83e9      	STD  Y+1,R30
000126 83fa      	STD  Y+1+1,R31
000127 9731      	SBIW R30,1
000128 91e4      	LPM  R30,Z
000129 2f1e      	MOV  R17,R30
00012a 30e0      	CPI  R30,0
00012b f019      	BREQ _0x2000019
00012c 2fa1      	MOV  R26,R17
00012d dfcd      	RCALL _lcd_putchar
00012e cff3      	RJMP _0x2000017
                 _0x2000019:
                 _0x20A0002:
00012f 8118      	LDD  R17,Y+0
000130 9623      	ADIW R28,3
000131 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000132 93aa      	ST   -Y,R26
000133 9a55      	SBI  0xA,5
000134 9a56      	SBI  0xA,6
000135 9a57      	SBI  0xA,7
000136 9a20      	SBI  0x4,0
000137 9a52      	SBI  0xA,2
000138 9a50      	SBI  0xA,0
000139 9a51      	SBI  0xA,1
00013a 985a      	CBI  0xB,2
00013b 9858      	CBI  0xB,0
00013c 9859      	CBI  0xB,1
00013d 8088      	LDD  R8,Y+0
00013e 81e8      	LD   R30,Y
00013f 58e0      	SUBI R30,-LOW(128)
                +
000140 93e0 0308+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000142 81e8      	LD   R30,Y
000143 54e0      	SUBI R30,-LOW(192)
                +
000144 93e0 0309+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000146 e1a4      	LDI  R26,LOW(20)
000147 e0b0      	LDI  R27,0
000148 940e 019d 	CALL _delay_ms
00014a 940e 0195 	CALL SUBOPT_0x1
00014c 940e 0195 	CALL SUBOPT_0x1
00014e 940e 0195 	CALL SUBOPT_0x1
000150 e2a0      	LDI  R26,LOW(32)
000151 df5e      	RCALL __lcd_write_nibble_G100
                +
000152 e980     +LDI R24 , LOW ( 400 )
000153 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000154 9701     +SBIW R24 , 1
000155 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000156 e2a8      	LDI  R26,LOW(40)
000157 df7d      	RCALL __lcd_write_data
000158 e0a4      	LDI  R26,LOW(4)
000159 df7b      	RCALL __lcd_write_data
00015a e8a5      	LDI  R26,LOW(133)
00015b df79      	RCALL __lcd_write_data
00015c e0a6      	LDI  R26,LOW(6)
00015d df77      	RCALL __lcd_write_data
00015e df90      	RCALL _lcd_clear
                 _0x20A0001:
00015f 9621      	ADIW R28,1
000160 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000161 93ba      	ST   -Y,R27
000162 93aa      	ST   -Y,R26
000163 91a9          ld   r26,y+
000164 91b9          ld   r27,y+
000165 91e9          ld   r30,y+
000166 91f9          ld   r31,y+
000167 9630          adiw r30,0
000168 f42a          brpl __itoa0
000169 95e0          com  r30
00016a 95f0          com  r31
00016b 9631          adiw r30,1
00016c e26d          ldi  r22,'-'
00016d 936d          st   x+,r22
                 __itoa0:
00016e 94e8          clt
00016f e180          ldi  r24,low(10000)
000170 e297          ldi  r25,high(10000)
000171 d00d          rcall __itoa1
000172 ee88          ldi  r24,low(1000)
000173 e093          ldi  r25,high(1000)
000174 d00a          rcall __itoa1
000175 e684          ldi  r24,100
000176 2799          clr  r25
000177 d007          rcall __itoa1
000178 e08a          ldi  r24,10
000179 d005          rcall __itoa1
00017a 2f6e          mov  r22,r30
00017b d010          rcall __itoa5
00017c 2766          clr  r22
00017d 936c          st   x,r22
00017e 9508          ret
                 
                 __itoa1:
00017f 2766          clr	 r22
                 __itoa2:
000180 17e8          cp   r30,r24
000181 07f9          cpc  r31,r25
000182 f020          brlo __itoa3
000183 9563          inc  r22
000184 1be8          sub  r30,r24
000185 0bf9          sbc  r31,r25
000186 f7c9          brne __itoa2
                 __itoa3:
000187 2366          tst  r22
000188 f411          brne __itoa4
000189 f016          brts __itoa5
00018a 9508          ret
                 __itoa4:
00018b 9468          set
                 __itoa5:
00018c 5d60          subi r22,-0x30
00018d 936d          st   x+,r22
00018e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _temp:
000300           	.BYTE 0x6
                 __base_y_G100:
000306           	.BYTE 0x4
                 __seed_G101:
00030a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00018f 940e 00d5 	CALL __lcd_write_data
000191 e0a3      	LDI  R26,LOW(3)
000192 e0b0      	LDI  R27,0
000193 940c 019d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000195 e3a0      	LDI  R26,LOW(48)
000196 940e 00b0 	CALL __lcd_write_nibble_G100
                +
000198 e980     +LDI R24 , LOW ( 400 )
000199 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00019a 9701     +SBIW R24 , 1
00019b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00019c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00019d 9610      	adiw r26,0
00019e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00019f ea80     +LDI R24 , LOW ( 0xFA0 )
0001a0 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0001a1 9701     +SBIW R24 , 1
0001a2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0001a3 95a8      	wdr
0001a4 9711      	sbiw r26,1
0001a5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   3 r4 :   3 r5 :   4 r6 :   4 r7 :   0 
r8 :   2 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  27 r25:  11 r26:  45 r27:  14 r28:   4 r29:   1 r30:  87 r31:  17 
x  :   7 y  :  55 z  :   9 
Registers used: 20 out of 35 (57.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   7 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   0 brne  :  14 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   9 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   2 cpi   :   4 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   3 jmp   :  28 ld    :  22 ldd   :   9 ldi   :  70 
lds   :   0 lpm   :   9 lsl   :   0 lsr   :   0 mov   :   8 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  14 pop   :   0 push  :   0 rcall :  25 ret   :   9 
reti  :   1 rjmp  :  14 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  13 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   4 sts   :   3 sub   :   1 subi  :   4 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00034e    812     34    846   32768   2.6%
[.dseg] 0x000100 0x00030e      0     14     14    2048   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
